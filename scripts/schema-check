#!/usr/bin/python3
#
# This utility does YAML schema verification. Given a schema and a YAML data
# file, it returns 0 if the data matches the schema and non-0 otherwise.
#
# Note that, although the schema is specified in YAML, we actually use
# jsonschema to do validation. This is because jsonschema is well-supported.
# Since you have to parse the document before passing it into jsonschema, any
# hierarchical JSON-like data structure works fine for representing the schema
# itself.
#

import argparse
import ast
import jsonschema
import operator
import simpleeval
import sys
import yaml


_format_checker = jsonschema.FormatChecker()


@_format_checker.checks('infix')
def _infix(val):
    '''Returns True if val is a valid infix expression and False otherwise.'''
    operators = {
        ast.Add: operator.add,
        ast.Sub: operator.sub,
        ast.Mult: operator.mul,
        ast.Div: operator.floordiv,
    }

    # We don't actually care what the names evaluate to, as we're not using
    # SimpleEval() to actually evaluate anything; we're just using it as a
    # shortcut to check whether or not the expression is valid in-fix. So, all
    # the values given here are just dummy placeholders.
    names = {
        'A': 0,
        'B': 0,
        'C': 0,
        'D': 0,
    }
    infix_eval = simpleeval.SimpleEval(operators=operators, names=names)

    try:
        infix_eval.eval(val)
    except:  # noqa: E722
        # eval can throw anything the Python parser can throw, so it's hard to
        # catch every possible item. So, exempt ourselves from this particular
        # flake8 warning.
        return False

    return True


def get_arg_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'datafile',
        action='store',
        help='The YAML file to check')
    parser.add_argument(
        '-s',
        '--schema',
        action='store',
        required=True,
        help='The schema to check against')
    parser.add_argument(
        '-q',
        '--quiet',
        action='store_true',
        default=False,
        help='No output, just return 0/non-0 if the check passes/fails')

    return parser


def main():
    parser = get_arg_parser()
    args = parser.parse_args()

    with open(args.schema, 'r') as f:
        schema = yaml.load(f)

    with open(args.datafile, 'r') as f:
        data = yaml.load(f)

    errors = list(jsonschema.Draft6Validator(schema, format_checker=_format_checker).iter_errors(data))
    count = len(errors)
    if count > 0:
        ret = 1
        if not args.quiet:
            errors.sort(key=jsonschema.exceptions.relevance)
            print('Schema validation failed with %d errors:' % count)
            for error in errors:
                print('-')
                s = str(error).replace('\n', '\n    ')
                print('    %s' % s)
    else:
        ret = 0

    return ret


if __name__ == '__main__':
    sys.exit(main())
